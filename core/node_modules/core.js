!function(){
	var path = require('path'),
		fs = require('fs'),
		os = require('os'),
		crypto = require('crypto');

	var basepath = path.join(__dirname,'..');

	var currentPath = process.cwd(),
		tempPath = os.tmpdir();

	var is_develop = path.dirname(currentPath) != tempPath;
	var project_path = is_develop? path.dirname(basepath): path.dirname(process.execPath);// 指向core所在目录或.exe所在目录
	var corePath = is_develop? basepath: path.dirname(process.execPath);
	/*得到源码根目录(打包运行时得到的是程序所在目录，开发环境下得到是源码的根目录)*/
	exports.getCorePath = function(){
		return corePath;
	}

	function getConf(name){
		return getConfJson(path.join(corePath,'conf',name+'.json'));
	}
	var conf = {};
	['Sys','Verification'].forEach(function(v,i){
		conf['get'+v] = function(){
			return getConf(v.toLowerCase());
		}
	});
	function writeFile(filepath,content){
		fs.writeFileSync(filepath,content);
		delete require.cache[filepath];
	}
	function getConfJson(filepath){
		if(fs.existsSync(filepath)){
			return require(filepath);
		}
		return null
	}
	conf.write = function(name,content){
		return writeFile(path.join(corePath,'conf',name+'.json'),content);
	}
	conf.get = getConf;
	conf.User = {
		get: function(name){
			return getConfJson(path.join(project_path,'conf',name+'.json'));
		},
		write: function(name,content,is_object){
			if(is_object){
				content = JSON.stringify(content);
			}
			return writeFile(path.join(project_path,'conf',name+'.json'),content);
		}
	}

	var util = {};
	/*加密字符串*/
	util.encrypt = function (str,private_key){
	    if(str && str.toString){
	        return crypto.createHash('sha1').update(str.toString()+(private_key||'util')).digest('hex');
	    }
	    return '';
	}
	!function(){
		// 同步新建目录
		function mkdirSync(mkPath){
			try{
				var parentPath = path.dirname(mkPath);
				if(!fs.existsSync(parentPath)){
					exports.mkdirSync(parentPath);
				}
				if(!fs.existsSync(mkPath)){
					fs.mkdirSync(mkPath);
				}
				return true;
			}catch(e){}
		}
		// 同步拷贝文件
		function copySync(fromPath,toPath){
			try{
				if(fs.existsSync(toPath)){
					fs.unlinkSync(toPath);
				}else{
					mkdirSync(path.dirname(toPath));
				}
				var BUF_LENGTH = 64*1024
				var buff = new Buffer(BUF_LENGTH)
				var fdr = fs.openSync(fromPath, 'r');
				var fdw = fs.openSync(toPath, 'w');
				var bytesRead = 1;
				var pos = 0;
				while (bytesRead > 0){
					bytesRead = fs.readSync(fdr, buff, 0, BUF_LENGTH, pos);
					fs.writeSync(fdw,buff,0,bytesRead);
					pos += bytesRead;
				}
				
				fs.closeSync(fdr);
				fs.closeSync(fdw);
				return true;
			}catch(e){}
		}

		// 遍历目录
		function readdir(dir){
			if(fs.existsSync(dir)){
				var stat = fs.statSync(dir);
				if(stat.isDirectory()){
					var return_val = [];
					var files = fs.readdirSync(dir);
    				files.sort().forEach(function(file) {
    					var fullName = path.join(dir, file);
    					var isDir = fs.statSync(fullName).isDirectory();
    					var obj = {name: fullName};
    					if (isDir) {
    						obj.sub = readdir(fullName);
    					}
    					return_val.push(obj);
    				});
    				return return_val;
				}
			}
		}
		function rmfileSync(p) {
		    //如果文件路径不存在或文件路径不是文件夹则直接返回
		    try{
		    	if(fs.existsSync(p)){
			    	var stat = fs.statSync(p);
			    	if(stat.isDirectory()){
			    		var files = fs.readdirSync(p);
			    		files.forEach(function(file) {
				            var fullName = path.join(p, file);
				            if (fs.statSync(fullName).isDirectory()) {
				                rmfileSync(fullName);
				            } else {
				                fs.unlinkSync(fullName);
				            }
				        });
					    fs.rmdirSync(p);
			    	}else{
			    		fs.unlinkSync(p);
			    	}
			    }
		    	return true;
		    }catch(e){}
		}
		
		var file_path = {
			icon: path.join(project_path,'image/icon'),
			image: path.join(project_path,'image/bg')
		}
		var file = {
			readdir: readdir,
			copy: copySync,
			mkdir: mkdirSync,
			rm: rmfileSync,
			path: file_path
		};
		util.file = file;
	}();
	
	util.path = path;
	util.writeFile = writeFile;
	exports.util = util;
	exports.conf = conf;
}();