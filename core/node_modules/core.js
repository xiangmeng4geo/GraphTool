!function(){
	var path = require('path'),
		fs = require('fs'),
		os = require('os'),
		crypto = require('crypto');

	var basepath = path.join(__dirname,'..');

	var currentPath = process.cwd(),
		tempPath = os.tmpdir();
	var is_develop = path.dirname(currentPath) != tempPath;
	var project_path = is_develop? path.dirname(currentPath): path.dirname(process.execPath);// 指向core所在目录或.exe所在目录
	var corePath = is_develop? currentPath: path.dirname(process.execPath);
	/*得到源码根目录(打包运行时得到的是程序所在目录，开发环境下得到是源码的根目录)*/
	exports.getCorePath = function(){
		return corePath;
	}

	function getConf(name){
		return getConfJson(path.join(corePath,'conf',name+'.json'));
	}
	var conf = {};
	['Sys','Verification'].forEach(function(v,i){
		conf['get'+v] = function(){
			return getConf(v.toLowerCase());
		}
	});
	function writeConf(filepath,content){
		fs.writeFileSync(filepath,content);
	}
	function getConfJson(filepath){
		if(fs.existsSync(filepath)){
			return require(filepath);
		}
		return null
	}
	conf.write = function(name,content){
		return writeConf(path.join(corePath,'conf',name+'.json'),content);
	}
	conf.get = getConf;
	conf.User = {
		get: function(name){
			return getConfJson(path.join(project_path,'conf',name+'.json'));
		},
		write: function(name,content,is_object){
			if(is_object){
				content = JSON.stringify(content);
			}
			return writeConf(path.join(project_path,'conf',name+'.json'),content);
		}
	}

	var util = {};
	/*加密字符串*/
	util.encrypt = function (str,private_key){
	    if(str && str.toString){
	        return crypto.createHash('sha1').update(str.toString()+(private_key||'util')).digest('hex');
	    }
	    return '';
	}
	exports.util = util;
	exports.conf = conf;
}();